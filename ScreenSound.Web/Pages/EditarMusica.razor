@page "/EditarMusica/{NomeMusica}"
@using ScreenSound.Web.Requests

@inject NavigationManager NavigationManager;

@inject ArtistaService artistaService;
@inject GeneroService generoService;
@inject MusicaService musicaService;

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Edição de Música</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome da música/canção"
        @bind-Value="nome"
        Variant="Variant.Outlined"
        Required="true"
        RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="ArtistaResponse"
        Label="Artistas"
        Variant="Variant.Outlined"
        AnchorOrigin="Origin.BottomCenter"
        ValueChanged="@ArtistaSelecionado">
            @if (Artistas is not null)
            {
                @foreach (var artista in Artistas)
                {
                    <MudSelectItem Value="artista" />
                }
            }
        </MudSelect>

        <MudNumericField Class="mt-4" Placeholder="Ano de lançamento"
        @bind-Value="anoLancamento"
        Variant="Variant.Outlined"
        Lines="1"
        Required="true"
        RequiredError="Campo obrigatório." />

        <MudSelect Class="mt-4" T="GeneroRequest"
        Label="Gêneros"
        Variant="Variant.Outlined"
        AnchorOrigin="Origin.BottomCenter"
        ValueChanged="@GeneroOnValueChanged">

            @if (Generos is not null)
            {
                @foreach (var genero in Generos)
                {
                    <MudSelectItem Value="genero" />
                }
            }

            @foreach (var genero in GenerosSelecionados)
            {
                <MudAlert Severity="Severity.Info">@(genero.Nome) adicionado como gênero da música.</MudAlert>
            }

        </MudSelect>

        <div class="d-flex align-center justify-space-between mt-4">
            <MudButton Variant="Variant.Filled"
            Color="Color.Primary"
            @onclick="Salvar"
            Class="ml-auto">
                Salvar
            </MudButton>
            <MudButton Variant="Variant.Filled"
            Color="Color.Info"
            @onclick="Voltar"
            Class="ml-3">
                Voltar
            </MudButton>
            <MudButton Variant="Variant.Filled"
            Color="Color.Error"
            Class="ml-3"
            @onclick="Deletar">
                Deletar
            </MudButton>
        </div>

    </MudForm>

</MudPaper>

@code {
    [Parameter]
    public string? NomeMusica { get; set; }
    public MusicaResponse? Musica { get; set; }

    private string? nome;
    private int? anoLancamento;

    private ICollection<ArtistaResponse>? Artistas { get; set; }
    private ICollection<GeneroResponse>? Generos { get; set; }

    private List<GeneroRequest>? GenerosSelecionados { get; set; } = new();
    private ArtistaResponse? ArtistaDaMusica { get; set; }
    private ICollection<GeneroRequest>? GenerosRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artistas = await artistaService.GetArtistaAsyncs();
        Generos = await generoService.GetGenerosAsync();
        Musica = await musicaService.GetMusicaPorNomeAsync(NomeMusica!);

        anoLancamento = Musica!.AnoLancamento;
        nome = Musica!.Nome;
        ArtistaDaMusica = new ArtistaResponse(Musica.ArtistaId.Value, Musica.NomeArtista, "", "");

        ArtistaSelecionado(ArtistaDaMusica);

        // if (Musica.)
        // {
            
        // }
    }

    private void ArtistaSelecionado(ArtistaResponse artista)
    {
        ArtistaDaMusica = artista;
    }

    private void GeneroOnValueChanged(GeneroRequest genero)
    {
        if (GenerosSelecionados is not null)
        {
            if (!GenerosSelecionados.Contains(genero))
            {
                GenerosSelecionados.Add(genero);
            }
        }
    }

    private async Task Salvar()
    {
        if (GenerosSelecionados is not null)
        {
            foreach (var genero in GenerosSelecionados)
            {
                GenerosRequest.Add(new GeneroRequest(genero.Id, genero.Nome, genero.Descricao));
            }
        }

        var musicaRequestEdit = new MusicaRequestEdit(Musica.Id, Musica.ArtistaId.Value, nome!, anoLancamento.Value, GenerosSelecionados);
        await musicaService.AtualizarMusicaAsync(musicaRequestEdit);

    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/MusicasPorArtistas");
    }

    private async Task Deletar()
    {
        await musicaService.DeletarMusicaAsync(Musica!.Id);
        NavigationManager.NavigateTo("/MusicasPorArtistas");
    }
}
